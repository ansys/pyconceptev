
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/03_bulk_job_submit.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_03_bulk_job_submit.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_bulk_job_submit.py:


Bulk Job Submit.
================

Example Script to bulk submit jobs to the ConceptEV API.
This example copies the template into a project and runs a number of jobs with different
combinations of components.
The combinations of components are specified in a CSV file format.

.. GENERATED FROM PYTHON SOURCE LINES 33-35

Perform Required imports
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 35-43

.. code-block:: Python


    import datetime

    import pandas as pd

    from ansys.conceptev.core import app
    from ansys.conceptev.core.exceptions import ResponseError








.. GENERATED FROM PYTHON SOURCE LINES 44-51

Set up inputs.
------------------------
Change the following variables to match your data.
The current filename for combinations can be used as an example.
The current base_concept_id is a template concept that will be copied.
Component Order is dictionary that maps the column names in the combinations file to the
component names in the API.

.. GENERATED FROM PYTHON SOURCE LINES 51-77

.. code-block:: Python

    filename = "resources/combinations.csv"  # See example file for format.
    base_concept_id = "2465235f-ad2e-4923-9125-e2e69ccf5816"  # Truck template.
    component_order = {
        "front_transmission_id": "Front Transmission",
        "front_motor_id": "Front Motor",
        "front_inverter_id": "Front Inverter",
        "rear_transmission_id": "Rear Transmission",
        "rear_motor_id": "Rear Motor",
        "rear_inverter_id": "Rear Inverter",
        "battery_id": "Battery",
        "front_clutch_id": "Front Clutch",
        "rear_clutch_id": "Rear Clutch",
    }


    def update_architecture(components, combo, base_architecture):
        # Update Architecture to match the new combinations.
        arch = {key: components[combo[value]] for key, value in component_order.items()}
        arch["number_of_front_wheels"] = base_architecture["number_of_front_wheels"]
        arch["number_of_front_motors"] = base_architecture["number_of_front_motors"]
        arch["number_of_rear_wheels"] = base_architecture["number_of_rear_wheels"]
        arch["number_of_rear_motors"] = base_architecture["number_of_rear_motors"]
        arch["wheelbase"] = base_architecture["wheelbase"]
        return arch









.. GENERATED FROM PYTHON SOURCE LINES 78-87

Create a client and create a new project from template.
-------------------------------------------------------
Authenticate and get a token
Create an API client.
Get the account ID and HPC ID.
Copy the template into a new project.
Add a clutch to the concept.
Get the component IDs for the new concept.
Get the architecture for the new concept.

.. GENERATED FROM PYTHON SOURCE LINES 87-131

.. code-block:: Python



    # Use API client for the Ansys ConceptEV service
    with app.get_http_client() as client:
        client.timeout = 200  # Extend timeout for uploading files.
        token = app.get_token(client)
        accounts = app.get_account_ids(token)
        account_id = accounts["conceptev_saas@ansys.com"]
        hpc_id = app.get_default_hpc(token, account_id)

        project = app.create_new_project(
            client, account_id, hpc_id, f"New Project {datetime.datetime.now()}"
        )
        project_id = project["projectId"]
        design_instance_id = app.create_design_instance(
            project_id, f"New Concept {datetime.datetime.now()}", token
        )
        app.copy_concept(base_concept_id, design_instance_id, client)
        base_concept_id = design_instance_id
        app.post(
            client,
            "/components",
            data={
                "item_type": "component",
                "name": "Disconnect Clutch",
                "mass": 0,
                "moment_of_inertia": 0,
                "cost": 0,
                "component_type": "ClutchInput",
                "efficiency": "95",
                "switch_energy": "10",
                "engaged_power": 0,
            },
            params={"design_instance_id": base_concept_id},
        )
        base_components = app.get_component_id_map(client, base_concept_id)

        base_concept = app.get(client, f"/concepts/{base_concept_id}")
        base_architecture = app.get(
            client,
            f"/architectures/{base_concept['architecture_id']}",
            params={"design_instance_id": base_concept_id},
        )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Encryption unavailable. Opting in to plain text.
    Traceback (most recent call last):
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/libsecret.py", line 18, in <module>
        import gi  # https://github.com/AzureAD/microsoft-authentication-extensions-for-python/wiki/Encryption-on-Linux  # pylint: disable=line-too-long
        ^^^^^^^^^
    ModuleNotFoundError: No module named 'gi'

    During handling of the above exception, another exception occurred:

    Traceback (most recent call last):
      File "/home/runner/work/pyconceptev/pyconceptev/src/ansys/conceptev/core/auth.py", line 53, in build_persistence
        return build_encrypted_persistence(location)
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/persistence.py", line 98, in build_encrypted_persistence
        return LibsecretPersistence(location)
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/persistence.py", line 314, in __init__
        from .libsecret import (  # This uncertain import is deferred till runtime
            LibSecretAgent, trial_run)
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/libsecret.py", line 20, in <module>
            raise ImportError("""Unable to import module 'gi'
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        ...<5 lines>...
        """)  # Message via exception rather than log
        ^^^^
    ImportError: Unable to import module 'gi'
    Runtime dependency of PyGObject is missing.
    Depends on your Linux distro, you could install it system-wide by something like:
        sudo apt install python3-gi python3-gi-cairo gir1.2-secret-1
    If necessary, please refer to PyGObject's doc:
    https://pygobject.readthedocs.io/en/latest/getting_started.html





.. GENERATED FROM PYTHON SOURCE LINES 132-140

Read combinations from a csv file and check they match the combinations file.
-----------------------------------------------------------------------------
Read combinations from a csv file.
Get the component types from the component_order dictionary.
Turn them into set.
Check that the component types are in the combinations file.
Get the component names from the combinations.
Check the component names are in the base components.

.. GENERATED FROM PYTHON SOURCE LINES 140-157

.. code-block:: Python


    combinations = pd.read_csv(filename, na_filter=False)
    combinations = combinations.to_dict("records")

    # Check the component types are in the header of the combinations file.
    component_types = set(component_order.values())
    component_types_from_combo_header = set(combinations[0].keys())
    assert component_types <= component_types_from_combo_header, component_types.difference(
        component_types_from_combo_header
    )
    # Check the component names in the combinations file are in the base components.
    component_names_from_combo = set([value for combo in combinations for value in combo.values()])
    component_names_from_base = set(base_components.keys())
    assert (
        component_names_from_combo <= component_names_from_base
    ), component_names_from_combo.difference(component_names_from_base)








.. GENERATED FROM PYTHON SOURCE LINES 158-168

Submit jobs for each combination.
---------------------------------
Create a new design instance with title.
Create an output list to store the created designs.
Copy the base Concept into that new design instance.
Get the component IDs for the new design instance as they change when copied.
Change the base concept to use the new components.
Update the architecture on the server.
Update the local concept instance with the new architecture id.
Create and submit a job using the new concept (with the new architecture).

.. GENERATED FROM PYTHON SOURCE LINES 168-214

.. code-block:: Python


    with app.get_http_client() as client:
        token = app.get_token(client)
        created_designs = []
        # Submit jobs for each combination
        for combo in combinations:
            try:
                # Create a new design instance with title.
                title = f"F_{combo['Front Motor']}_R_{combo['Rear Motor']} {datetime.datetime.now()}"
                design_instance_id = app.create_design_instance(project_id, title=title, token=token)

                # Copy base Concept into that new design instance.
                concept = app.copy_concept(base_concept_id, design_instance_id, client)
                print(f"ID of the cloned concept: {concept['id']}")
                # Save that in output list.
                created_designs.append(
                    {
                        "Project Name": title,
                        "Design Instance Id": design_instance_id,
                        "Concept_ID": concept["id"],
                    },
                )
                # Get the component IDs for the new design instance as they change when copied.
                params = {"design_instance_id": design_instance_id}
                components = app.get_component_id_map(client, design_instance_id)
                # Change the base concept to use the new components.
                updated_architecture = update_architecture(components, combo, base_architecture)
                # Update the architecture on the server.
                created_arch = app.post(client, "/architectures", data=updated_architecture)
                print(f"Created architecture: {created_arch}\n")

                # Update the local concept instance with the new architecture id.
                concept["architecture_id"] = created_arch["id"]

                # Create and submit a job using the new concept (with the new architecture)
                job_info = app.create_submit_job(
                    client,
                    concept,
                    account_id,
                    hpc_id,
                    job_name=f"cli_job: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')}",
                )
                print(f"Submitted job for combination {combo}: {job_info}")
            except ResponseError as err:
                print(f"Failed to submit job for combination {combo}: {err}")
                continue  # If one job fails to submit keep trying the other jobs.




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Encryption unavailable. Opting in to plain text.
    Traceback (most recent call last):
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/libsecret.py", line 18, in <module>
        import gi  # https://github.com/AzureAD/microsoft-authentication-extensions-for-python/wiki/Encryption-on-Linux  # pylint: disable=line-too-long
        ^^^^^^^^^
    ModuleNotFoundError: No module named 'gi'

    During handling of the above exception, another exception occurred:

    Traceback (most recent call last):
      File "/home/runner/work/pyconceptev/pyconceptev/src/ansys/conceptev/core/auth.py", line 53, in build_persistence
        return build_encrypted_persistence(location)
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/persistence.py", line 98, in build_encrypted_persistence
        return LibsecretPersistence(location)
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/persistence.py", line 314, in __init__
        from .libsecret import (  # This uncertain import is deferred till runtime
            LibSecretAgent, trial_run)
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/libsecret.py", line 20, in <module>
            raise ImportError("""Unable to import module 'gi'
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        ...<5 lines>...
        """)  # Message via exception rather than log
        ^^^^
    ImportError: Unable to import module 'gi'
    Runtime dependency of PyGObject is missing.
    Depends on your Linux distro, you could install it system-wide by something like:
        sudo apt install python3-gi python3-gi-cairo gir1.2-secret-1
    If necessary, please refer to PyGObject's doc:
    https://pygobject.readthedocs.io/en/latest/getting_started.html

    ID of the cloned concept: 687f741f13686630f2c21ba7
    Created architecture: {'id': '687f742213686630f2c21bc5', 'wheelbase': None, 'components_cost': 15820.0, 'components_mass': 561.0, 'max_wheel_speed': 1071.4285714285716, 'number_of_front_wheels': 2, 'number_of_front_motors': 1, 'front_clutch_id': '687f742013686630f2c21bb4', 'front_transmission_id': '687f741f13686630f2c21ba8', 'front_motor_id': '687f741f13686630f2c21bad', 'front_inverter_id': '687f741f13686630f2c21bb1', 'number_of_rear_wheels': 2, 'number_of_rear_motors': 1, 'rear_clutch_id': None, 'rear_transmission_id': '687f741f13686630f2c21ba9', 'rear_motor_id': '687f741f13686630f2c21bab', 'rear_inverter_id': '687f741f13686630f2c21bb0', 'battery_id': '687f742013686630f2c21bb3'}

    Submitted job for combination {'Front Transmission': 'Single Speed 10:1', 'Front Motor': 'IM_300kW_20kRPM_800V_50Bars36Slots_500A', 'Front Inverter': 'MOSFET Inverter Model', 'Rear Transmission': 'Single Speed 14:1', 'Rear Motor': 'IPM_345kW_15kRPM_800V_8Poles48Slots_460A_LABupTo15krpm', 'Rear Inverter': 'IGBT Inverter Model', 'Battery': 'CellA_800Vdc_100kWh', 'Front Clutch': 'Disconnect Clutch', 'Rear Clutch': 'N/A'}: {'job_id': '8626e5b3-f9cd-4707-a1ec-6372451bf369', 'job_name': 'cli_job: 2025-07-22 11:21:06.141913', 'docker_tag': 'default', 'simulation_id': '65c08d29-a80e-4bc0-a166-20041e9dd4f3'}
    ID of the cloned concept: 687f742813686630f2c21bc7
    Created architecture: {'id': '687f742b13686630f2c21be5', 'wheelbase': None, 'components_cost': 15820.0, 'components_mass': 563.0, 'max_wheel_speed': 1071.4285714285716, 'number_of_front_wheels': 2, 'number_of_front_motors': 1, 'front_clutch_id': '687f742913686630f2c21bd4', 'front_transmission_id': '687f742813686630f2c21bc8', 'front_motor_id': '687f742813686630f2c21bcf', 'front_inverter_id': '687f742913686630f2c21bd1', 'number_of_rear_wheels': 2, 'number_of_rear_motors': 1, 'rear_clutch_id': None, 'rear_transmission_id': '687f742813686630f2c21bc9', 'rear_motor_id': '687f742813686630f2c21bcb', 'rear_inverter_id': '687f742813686630f2c21bd0', 'battery_id': '687f742913686630f2c21bd3'}

    Submitted job for combination {'Front Transmission': 'Single Speed 10:1', 'Front Motor': 'WRSM_330kW_15kRPM_800V_8Poles48Slots_500A_LABupTo15krpm', 'Front Inverter': 'MOSFET Inverter Model', 'Rear Transmission': 'Single Speed 14:1', 'Rear Motor': 'IPM_345kW_15kRPM_800V_8Poles48Slots_460A_LABupTo15krpm', 'Rear Inverter': 'IGBT Inverter Model', 'Battery': 'CellA_800Vdc_100kWh', 'Front Clutch': 'Disconnect Clutch', 'Rear Clutch': 'N/A'}: {'job_id': '4c07b354-2648-431a-9f60-ffac735fd7d4', 'job_name': 'cli_job: 2025-07-22 11:21:15.710315', 'docker_tag': 'default', 'simulation_id': '0142d517-7cbc-4b90-8a4a-7e310a9d034c'}




.. GENERATED FROM PYTHON SOURCE LINES 215-219

Save the list of created designs to a file.
-------------------------------------------
Create a pandas dataframe.
Export to Excel.

.. GENERATED FROM PYTHON SOURCE LINES 219-222

.. code-block:: Python

    all_results = pd.DataFrame(created_designs)
    all_results.to_excel("created_designs.xlsx")








.. GENERATED FROM PYTHON SOURCE LINES 223-230

Delete the extra project on the server.
---------------------------------------
Delete the project on the server.

.. warning::
   This will delete the project and all its contents.
   Only needed for keep test environment clean.

.. GENERATED FROM PYTHON SOURCE LINES 230-237

.. code-block:: Python


    with app.get_http_client() as client:
        for concept in created_designs:
            client.params = client.params.set("design_instance_id", concept["Design Instance Id"])
            app.delete(client, "concepts", id=concept["Concept_ID"])
        app.delete_project(project_id, token)
        print(f"Deleted project {project_id}")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Encryption unavailable. Opting in to plain text.
    Traceback (most recent call last):
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/libsecret.py", line 18, in <module>
        import gi  # https://github.com/AzureAD/microsoft-authentication-extensions-for-python/wiki/Encryption-on-Linux  # pylint: disable=line-too-long
        ^^^^^^^^^
    ModuleNotFoundError: No module named 'gi'

    During handling of the above exception, another exception occurred:

    Traceback (most recent call last):
      File "/home/runner/work/pyconceptev/pyconceptev/src/ansys/conceptev/core/auth.py", line 53, in build_persistence
        return build_encrypted_persistence(location)
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/persistence.py", line 98, in build_encrypted_persistence
        return LibsecretPersistence(location)
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/persistence.py", line 314, in __init__
        from .libsecret import (  # This uncertain import is deferred till runtime
            LibSecretAgent, trial_run)
      File "/home/runner/work/pyconceptev/pyconceptev/.venv/lib/python3.13/site-packages/msal_extensions/libsecret.py", line 20, in <module>
            raise ImportError("""Unable to import module 'gi'
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        ...<5 lines>...
        """)  # Message via exception rather than log
        ^^^^
    ImportError: Unable to import module 'gi'
    Runtime dependency of PyGObject is missing.
    Depends on your Linux distro, you could install it system-wide by something like:
        sudo apt install python3-gi python3-gi-cairo gir1.2-secret-1
    If necessary, please refer to PyGObject's doc:
    https://pygobject.readthedocs.io/en/latest/getting_started.html

    Deleted project b4f521cc-f52d-40d8-b0e9-63d3eafb81f3





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 30.028 seconds)


.. _sphx_glr_download_auto_examples_03_bulk_job_submit.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 03_bulk_job_submit.ipynb <03_bulk_job_submit.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 03_bulk_job_submit.py <03_bulk_job_submit.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 03_bulk_job_submit.zip <03_bulk_job_submit.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
